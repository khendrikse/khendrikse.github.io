{"pageProps":{"siteTitle":"Karin Hendrikse","frontmatter":{"layout":"post","title":"Beautify your Raspberry Pi with the Pimoroni Blinkt!","published":true,"oldBlog":true,"date":"2020-01-26","description":"Make your Raspberry Pi shine in blue and purple colors.","cover_image":"https://thepracticaldev.s3.amazonaws.com/i/jwk9ue7pvtuj151srtod.JPG","cover_image_alt":"a raspberry pi with shining LED lights","tags":null,"intro":"You know those gaming PC's with their awesome LEDs spinning around? Well, I don't have one of those. But I am learning Linux on my Raspberry Pi. And I learn quicker by working on fun small side projects. So I decided to spice my Raspberry Pi up using the Pimoroni Blinkt."},"markdownBody":"\n![LEDs light up inside a Raspberry Pi](https://thepracticaldev.s3.amazonaws.com/i/q06jxjljnvamg81gclj0.gif)\n\n**In this post we're going to write a little Python script, and in [the next post](https://dev.to/khenhey/light-up-leds-when-you-start-your-raspberry-pi-and-clear-them-on-shutdown-542) we'll turn the LEDs on as a background process at startup and switch them off again during shutdown.**\n\n## Setting up the [Pimoroni Blinkt](https://shop.pimoroni.com/products/blinkt)\n\nSetting up the Blinkt is quite straight-forward. First, make sure to place the Blinkt on the Raspberry Pi's 40-pin header. The rounded corners of the Blinkt should align with the Pi's rounded corner.\n\nMake sure you are logged into your Pi and in the terminal run\n\n```bash\n$ curl https://get.pimoroni.com/blinkt | bash\n```\n\nThis will install the software you'll need to run the Blinkt. We're using the [documentation](http://docs.pimoroni.com/blinkt/) to learn how to set up a linear blue/purple pattern.\n\nCreate and open a new Python file in your terminal. In my case I created one in the Pimoroni folder:\n\n```bash\n$ nano Pimoroni/blue_purple.py\n```\n\nI did this using the `nano` editor. You can also create a file another way and open it in your preferred editor.\n\n## Import dependencies\n\nFirst, we need to import the libraries we need. At the top of the file we import `blinkt` to control the LEDs, `time` to create time-outs and `numpy` to create a range of decimals later on.\n\n```py\n#!/usr/bin/env python\n\nimport blinkt\nimport time\nimport numpy\n\n```\n\n## Variables\n\nCreate a list of colors in RGB format. With this, I mean that we create a list of lists. Each small list contains a number for r, g, and b.\n\nThen we use `numpy` to create a range of floats between `0` and `0.5`. The range is made with steps of `0.03`. This range will help us gradually light up each pixel.\n\n```py\nCOLOR_LIST = [[0, 127, 255], [0, 0, 255], [127, 0, 255], [255, 0, 255], [255, 0, 127]]\nBRIGHTNESS_RANGE = numpy.arange(0, 0.5, 0.03)\n```\n\nAdd the following script to ensure that if the script stops, the LEDs clear.\n\n```py\nblinkt.set_clear_on_exit()\n```\n\n## Setting the pixels\n\nWe will create a function that takes a pixel, the RGB colors and a range of values that represent the different brightnesses as arguments. It will loop over the list of values for brightness and for every brightness value it will set a pixel with the correct color.\n\n```py\ndef set_brightness(pixel, r, g, b, brightRange):\n    for brightness in brightRange:\n        blinkt.set_pixel(pixel, r, g, b, brightness)\n\tblinkt.show()\n        # we need to run show after setting the pixel\n        # otherwise we won't see anything change.\n\ttime.sleep(0.01)\n        # give it a little time to add a slight effect.\n```\n\n## While loop\n\nNow we're going to get to the actual loop that is going to make our Pimoroni Blinkt light up.\n\n\nWe are going to start a while loop and inside loop over every color array in `COLOR_LIST`.\n\nWhen we run the script inside the terminal and press `CTRL-C` it will throw a KeyboardInterrupt exception. Because we want to make sure we can stop our `While True` loop, we use `try` and listen for the exception to stop the loop.\n\nThe blinkt library has its own constant called `blinkt.NUM_PIXELS` that spits out the amount of pixels that are available on the device. For every pixel, we call the `set_brightness` function. We pass the pixel and RGB colors, together with the `BRIGHTNESS_RANGE`.\n\n\n```py\ntry:\n    while True:\n        for color in COLOR_LIST:\n            for pixel in range(blinkt.NUM_PIXELS):\n                set_brightness(pixel, color[0], color[1], color[2], BRIGHTNESS_RANGE)\n            for pixel in reversed(range(blinkt.NUM_PIXELS)):\n                set_brightness(pixel, color[0], color[1], color[2], reversed(BRIGHTNESS_RANGE))\nexcept KeyboardInterrupt:\n    pass\n```\n\nBecause we want the pixels to light up, and then gradually turn off again, we do a reversed for loop. See the difference between the two? We use `reversed(range(blinkt.NUM_PIXELS))` and we also send a reversed `BRIGHTNESS_RANGE`.\n\nThis is it for now! Try it out by saving the file and running it:\n\n```bash\n$ python blue_purple.py\n```\n\nTo stop the script, use `CTRL-C`.\n\nThis is only the first part. In [the next post](https://dev.to/khenhey/light-up-leds-when-you-start-your-raspberry-pi-and-clear-them-on-shutdown-542), we will set up our Raspberry Pi so it starts running this script as a background process on startup, and close it when we shut the Pi down.\n\n**Check the [finished script](https://github.com/khendrikse/blinkt-purple-blue/blob/master/blue_purple.py)**\n\n_Sources:_\n[Get started with Blinkt](https://learn.pimoroni.com/tutorial/sandyj/getting-started-with-blinkt)\n[Pimoroni Blinkt Documentation](http://docs.pimoroni.com/blinkt/#enable-disable-clear-on-exit)\n[KeyboardInterrupt](http://effbot.org/zone/stupid-exceptions-keyboardinterrupt.htm)\n","date":null,"slug":"beautify-your-raspberry-pi-with-the-pimoroni-blinkt","image":"https://thepracticaldev.s3.amazonaws.com/i/jwk9ue7pvtuj151srtod.JPG"},"__N_SSG":true}